#!/usr/bin/env python3
import socket
import binascii

HOST = 'challenge.nahamcon.com'
PORT = 31782

def recv_line(sock):
    """
    Read a line from the socket, up to and including the next newline.
    Returns the decoded string (newline retained).
    """
    buffer = b''
    while not buffer.endswith(b'\n'):
        chunk = sock.recv(1)
        if not chunk:
            raise ConnectionError("Connection closed by peer")
        buffer += chunk
    return buffer.decode(errors='ignore')

def main():
    # Establish TCP connection to the challenge service
    conn = socket.create_connection((HOST, PORT))

    # Consume and discard the initial welcome banner
    _ = recv_line(conn)

    # Retrieve the encrypted flag from the service
    flag_line = recv_line(conn)
    print(flag_line.strip())
    encrypted_flag = binascii.unhexlify(flag_line.split()[-1])

    # Discard the prompt for user input before leaking keystream
    _ = recv_line(conn)

    # Send a known plaintext of 'A' * length_of_flag to obtain keystream
    length = len(encrypted_flag)
    conn.sendall(b'A' * length + b'\n')

    # Read back the encryption of our known plaintext
    leak_line = recv_line(conn)
    print(leak_line.strip())
    encrypted_payload = binascii.unhexlify(leak_line.split()[-1])

    # Compute keystream: keystream = E('A') XOR 'A'
    keystream = bytes(ct ^ ord('A') for ct in encrypted_payload)

    # Recover flag: flag = encrypted_flag XOR keystream
    flag = bytes(f ^ k for f, k in zip(encrypted_flag, keystream))
    print(f"\nRecovered flag: {flag.decode()}")

if __name__ == '__main__':
    main()
